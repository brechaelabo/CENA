
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  TUTOR
  ACTOR
  GUEST
}

enum Plan {
  BASIC
  PLUS
  PRO
}

enum BillingCycle {
  MONTHLY
  QUARTERLY
  SEMIANNUAL
  ANNUAL
}

enum FeedbackMode {
  ASYNC
  LIVE
}

enum AddOnType {
  LIVE_FEEDBACK_UPGRADE
  ONE_ON_ONE_SESSION
}

model User {
  id            String         @id @default(cuid())
  clerkId       String         @unique
  name          String?
  email         String         @unique
  imageUrl      String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  rolePivots    RolePivot[]
  submissions   Submission[]   @relation("ActorSubmissions")
  feedbacks     Feedback[]     @relation("TutorFeedbacks")
  subscriptions Subscription[]
  addOnPurchases AddOnPurchase[]
}

model RolePivot {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  role      Role     @default(ACTOR)
  plan      Plan?
  createdAt DateTime @default(now())
}

model Theme {
  id             Int          @id @default(autoincrement())
  title          String
  description    String
  headerImageUrl String
  videoUrl       String
  pdfUrls        String[]
  active         Boolean      @default(true)
  createdAt      DateTime     @default(now())
  submissions    Submission[]
}

model Submission {
  id           Int           @id @default(autoincrement())
  actor        User          @relation("ActorSubmissions", fields: [actorId], references: [id])
  actorId      String
  theme        Theme         @relation(fields: [themeId], references: [id])
  themeId      Int
  tapeUrls     String[]
  feedbackMode FeedbackMode  @default(ASYNC)
  createdAt    DateTime      @default(now())
  feedback     Feedback?
}

model Feedback {
  id               Int        @id @default(autoincrement())
  submission       Submission @relation(fields: [submissionId], references: [id])
  submissionId     Int        @unique
  tutor            User       @relation("TutorFeedbacks", fields: [tutorId], references: [id])
  tutorId          String
  videoUrl         String
  transcript       String
  mode            FeedbackMode
  liveAt          DateTime?
  createdAt       DateTime    @default(now())
}

model Subscription {
  id            Int           @id @default(autoincrement())
  user          User          @relation(fields: [userId], references: [id])
  userId        String
  plan          Plan
  billingCycle  BillingCycle
  status        String        @default("ACTIVE")
  stripeSubId   String?
  createdAt     DateTime      @default(now())
}

model AddOnPurchase {
  id                 Int       @id @default(autoincrement())
  user               User      @relation(fields: [userId], references: [id])
  userId             String
  type               AddOnType
  targetSubmissionId Int?
  redeemed           Boolean   @default(false)
  createdAt          DateTime  @default(now())
}
